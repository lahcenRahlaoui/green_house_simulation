package sample;

import hhh.FillProgressIndicator;
import javafx.animation.PathTransition;
import javafx.application.Platform;
import javafx.event.Event;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.*;
import javafx.util.Duration;
import ring.*;

import java.util.Random;
import java.util.concurrent.Semaphore;

public class Client implements Runnable {

    double vitess = 1.5;

    public Client( ) { }

    @Override
    public void run() {

         try{

            Semaphore s = new Semaphore(0);

            Main.entree.acquire();
            Main.p1.acquire();
            ImageView plant = imgplant(0);
            plant.setLayoutX(Main.point1.getX());
            plant.setLayoutY(Main.point1.getY());
            ImageView firstPlant = plant;
            Platform.runLater(() -> {
                Main.root.getChildren().add(firstPlant);
            });

             Main.p2.acquire();

             multupath(
                        0 ,
                        0 ,

                         Main.point2.getX() - Main.point1.getX() ,
                         Main.point1.getY() - Main.point1.getY(),
                         Main.point2.getX() - Main.point1.getX(),
                         Main.point2.getY() - Main.point1.getY(),
                                firstPlant,   s
             );
         RingProgressIndicator rg = new RingProgressIndicator();
             rg.makeIndeterminate();
             rg.setRingWidth(50);
            Main.p1.release();

             ImageView image = new ImageView("sample/phone.gif");
             image.setFitWidth(30);
             image.setFitHeight(30);


             Point waitPoint = null;
            int waitPlace = -1;
            int checkPlace = -1;
            Point cabinPoint = null;
            int freeCabinIndex = -1;
            Main.waitC.acquire();

            if (Main.waiting >= Main.numberOfChairs)
            {
                Main.waitC.release();

                Main.gettingWaitingSeat.acquire();

                Main.waitC.acquire();
                Main.waiting++;
                Main.waitC.release();

                Main.getFreeWaitingSeat.acquire();
                for (int i = 0; i < Main.freeWait.size(); i++) {
                    if ( Main.freeWait.get(i).isFree() ) {
                        waitPlace = i;
                        waitPoint = Main.waitPoints.get(i);
                        Main.freeWait.get(i).setFree(false);
                        break;
                    }
                }
                Main.getFreeWaitingSeat.release();

                if ( Main.p2 != null && waitPoint != null) {
                    multupath(
                            Main.point2.getX() - Main.point1.getX(),
                            Main.point2.getY() - Main.point1.getY(),

                            waitPoint.getX() - Main.point1.getX(),
                            Main.point2.getY() - Main.point1.getY(),
                            waitPoint.getX() - Main.point1.getX(),
                            waitPoint.getY() - Main.point1.getY(),
                            firstPlant,   s
                   );
                }

                Main.p2.release();

                Main.entree.release();

                Main.gettingCabin.acquire();

                Main.getCabin.acquire();
                for (int i = 0; i < Main.freeCabin.size(); i++) {
                    if (Main.freeCabin.get(i).isFree()) {
                        cabinPoint = Main.cabinPoints.get(i);
                        Main.freeCabin.get(i).setFree(false);
                        freeCabinIndex = i;
                        break;
                    }
                }

                Main.getCabin.release();

                if (cabinPoint != null && waitPoint != null) {

                    multupath(
                            waitPoint.getX() - Main.point1.getX(),
                            waitPoint.getY() - Main.point1.getY(),

                            Main.point2.getX() - Main.point1.getX(),
                            Main.point2.getY() - Main.point1.getY(),
                            Main.point2.getX() - Main.point1.getX(),
                            Main.point1.getY() - Main.point1.getY(),
                            firstPlant,   s
                    );
                }
                Main.callC.acquire();
                Main.calling++;
                Main.callC.release();

                Main.getFreeWaitingSeat.acquire();
                Main.freeWait.get(waitPlace).setFree(true);
                Main.getFreeWaitingSeat.release();

                Main.waitC.acquire();
                Main.waiting--;
                Main.waitC.release();
                Main.gettingWaitingSeat.release();
            }
            else
            {

                if (Main.waiting == 0)
                {

                    Main.callC.acquire();

                    if (Main.calling >= Main.numberOfCabines)

                    {

                        Main.callC.release();

                        Main.gettingWaitingSeat.acquire();

                        Main.waiting++;
                        Main.waitC.release();

                        Main.getFreeWaitingSeat.acquire();




                        for (int i = 0; i < Main.freeWait.size(); i++) {
                            if ( Main.freeWait.get(i).isFree() ) {
                                waitPlace = i;
                                waitPoint = Main.waitPoints.get(i);
                                Main.freeWait.get(i).setFree(false);
                                break;
                            }
                        }

                        Main.getFreeWaitingSeat.release();

                        if ( Main.p2 != null && waitPoint != null) {



                            multupath(
                                    Main.point2.getX() - Main.point1.getX(),
                                    Main.point2.getY() - Main.point1.getY(),

                                    waitPoint.getX() - Main.point1.getX(),
                                    Main.point2.getY() - Main.point1.getY(),
                                    waitPoint.getX() - Main.point1.getX(),
                                    waitPoint.getY() - Main.point1.getY(),
                                    firstPlant,   s
                            );

                        }


                        Main.p2.release();

                        Main.entree.release();

                        Main.gettingCabin.acquire();

                        Main.getCabin.acquire();

                        for (int i = 0; i < Main.freeCabin.size(); i++) {
                            if (Main.freeCabin.get(i).isFree()) {
                                cabinPoint = Main.cabinPoints.get(i);
                                Main.freeCabin.get(i).setFree(false);
                                freeCabinIndex = i;
                                break;
                            }
                        }

                        Main.getCabin.release();

                        if (cabinPoint != null && waitPoint != null) {


                            multupath(
                                    waitPoint.getX() - Main.point1.getX(),
                                    waitPoint.getY() - Main.point1.getY(),

                                    cabinPoint.getX() - Main.point1.getX(),
                                    waitPoint.getY() - Main.point1.getY(),
                                    cabinPoint.getX() - Main.point1.getX(),
                                    cabinPoint.getY() - Main.point1.getY(),
                                    firstPlant,   s
                            );
                        }
                        Main.callC.acquire();
                        Main.calling++;
                        Main.callC.release();

                        Main.getFreeWaitingSeat.acquire();
                        Main.freeWait.get(waitPlace).setFree(true);
                        Main.getFreeWaitingSeat.release();

                        Main.waitC.acquire();
                        Main.waiting--;
                        Main.waitC.release();

                        Main.gettingWaitingSeat.release();

                    }

                    else
                    {

                        Main.gettingCabin.acquire();

                        Main.getCabin.acquire();
                        for (int i = 0; i < Main.freeCabin.size(); i++) {
                            if (Main.freeCabin.get(i).isFree()) {
                                cabinPoint = Main.cabinPoints.get(i);
                                Main.freeCabin.get(i).setFree(false);
                                freeCabinIndex = i;
                                break;
                            }
                        }


                        Main.getCabin.release();

                        if (cabinPoint != null && Main.point2 != null) {

                            multupath(
                                    Main.point2.getX() - Main.point1.getX(),
                                    Main.point2.getY() - Main.point1.getY(),

                                    cabinPoint.getX() - Main.point1.getX(),
                                    Main.point2.getY() - Main.point1.getY(),
                                    cabinPoint.getX() - Main.point1.getX(),
                                    cabinPoint.getY() - Main.point1.getY(),
                                    firstPlant,   s
                            );

                        }


                        Main.p2.release();

                        Main.entree.release();

                        Main.calling++;

                        Main.callC.release();

                        Main.waitC.release();

                    }
                }
                else
                {


                    Main.gettingWaitingSeat.acquire();

                    Main.waiting++;
                    Main.waitC.release();

                    Main.getFreeWaitingSeat.acquire();
                    for (int i = 0; i < Main.freeWait.size(); i++) {
                        if ( Main.freeWait.get(i).isFree() ) {
                            waitPlace = i;
                            waitPoint = Main.waitPoints.get(i);
                            Main.freeWait.get(i).setFree(false);
                            break;
                        }
                    }
                    Main.getFreeWaitingSeat.release();

                    if ( Main.p2 != null && waitPoint != null ) {


                        multupath(
                                Main.point2.getX() - Main.point1.getX(),
                                Main.point2.getY() - Main.point1.getY(),


                                waitPoint.getX() - Main.point1.getX(),
                                Main.point2.getY() - Main.point1.getY(),
                                waitPoint.getX() - Main.point1.getX(),
                                waitPoint.getY() - Main.point1.getY(),
                                firstPlant,   s
                        );

                    }



                    Main.p2.release();

                    Main.entree.release();

                    Main.gettingCabin.acquire();

                    Main.getCabin.acquire();





                    for (int i = 0; i < Main.freeCabin.size(); i++) {
                        if (Main.freeCabin.get(i).isFree()) {
                            cabinPoint = Main.cabinPoints.get(i);
                            Main.freeCabin.get(i).setFree(false);
                            freeCabinIndex = i;
                            break;
                        }
                    }

                    Main.getCabin.release();

                    if (cabinPoint != null && waitPoint != null) {

                        multupath(
                                waitPoint.getX() - Main.point1.getX(),
                                waitPoint.getY() - Main.point1.getY(),


                                cabinPoint.getX() - Main.point1.getX(),
                                waitPoint.getY() - Main.point1.getY(),
                                cabinPoint.getX() - Main.point1.getX(),
                                cabinPoint.getY() - Main.point1.getY(),
                                firstPlant,   s
                        );

                    }
                    Main.callC.acquire();
                    Main.calling++;
                    Main.callC.release();

                    Main.getFreeWaitingSeat.acquire();
                    Main.freeWait.get(waitPlace).setFree(true);
                    Main.getFreeWaitingSeat.release();

                    Main.waitC.acquire();
                    Main.waiting--;
                    Main.waitC.release();
                    Main.gettingWaitingSeat.release();
                }
            }



            /******************************************************************/


           rg.setLayoutX(cabinPoint.getX()-16);
           rg.setLayoutY(cabinPoint.getY()-80);
             Controller.circleTime = 30000/1000;

             ImageView gifPlant = new ImageView("sample/fff.gif");
             System.out.println("fasdfasdfas    "+ cabinPoint.getX());

             gifPlant.setLayoutX(cabinPoint.getX()-40);
             gifPlant.setLayoutY(cabinPoint.getY()-35);

             gifPlant.setFitWidth(80);
             gifPlant.setFitHeight(70);

        Main.h3.acquire();

            if ( Main.activetank )
              {
                  tan();
                  Main.h1.acquire();
			Main.h3.release();

			 new water(Main.r1).start();



                  new work(rg,30000/1000).start();
                  Platform.runLater(()-> {
                      Main.root.getChildren().add(rg);
                      Main.root.getChildren().remove(firstPlant);
                      Main.root.getChildren().add(gifPlant);
                  });

                  Thread.sleep(30000);

                  Main.h1.release();
            }
             else
            {
                Main.h2.acquire();
                Main.h3.release();

                new work(rg,30000/1000).start();
                Platform.runLater(()-> {
                    Main.root.getChildren().add(rg);
                    Main.root.getChildren().remove(firstPlant);
                    Main.root.getChildren().add(gifPlant);
                });
                    Thread.sleep(30000);
                Main.h2.release();
            }


             /*****************************************************/

             multupath(
                     0,
                     0,


                     cabinPoint.getX()-40 - Main.point1.getX(),
                     Main.point2.getY() - Main.point1.getY(),
                     cabinPoint.getX()-40 - Main.point1.getX(),
                     cabinPoint.getY()  - Main.point1.getY(),
                     gifPlant,   s
             );

            Main.checkout.acquire();
            Platform.runLater(()->{
                Main.root.getChildren().remove(rg);
            });
            Main.getCabin.acquire();
            Main.freeCabin.get(freeCabinIndex).setFree(true);
            Main.getCabin.release();

            Main.callC.acquire();
            Main.calling--;
            Main.callC.release();

            Main.gettingCabin.release();
             Main.checkout.release();
            Platform.runLater(() -> {  Main.root.getChildren().remove(gifPlant); });
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    public ImageView imgplant(int p){

        //Image  imageplant = new Image();

        Image  image = null ;
        if (p == 0 ){
               image = new Image("sample/seed.png");
        }
        else{
               image = new Image("sample/gifplant.gif");
                }


        ImageView imageView = new ImageView(image);

        imageView.setPreserveRatio(true);
        imageView.setFitWidth(80);
        imageView.setFitHeight(70);

        return imageView;
    }

    public void tan(){

        Main.tank -= 900;
        System.out.println(" i really used  " +(3600- Main.tank));
        if (Main.tank > 0 ){
            Main.activetank = true;
        }else{
            Main.activetank = false;
        }

    }




    public void multupath(double x , double y , double Q1 , double Q2 , double Q3 , double  Q4, ImageView p , Semaphore s ) throws InterruptedException {
        PathTransition pathTransition = new PathTransition();
        pathTransition.setDuration(Duration.seconds(vitess));
        pathTransition.setNode(p);
        Path path = new Path();

        path.getElements().add(new MoveTo(x, y));
        path.getElements().add(new QuadCurveTo(   Q1  ,   Q2,    Q3,     Q4   ));
        pathTransition.setPath(path);
        PathTransition finalPathTransition = pathTransition;
        finalPathTransition.setOnFinished(event -> s.release());
        Platform.runLater(() -> { finalPathTransition.play();  });
        s.acquire();


    }




    //// claaases



    class work extends Thread{

        RingProgressIndicator r ;
        int progress ;

        public work(RingProgressIndicator r, int p){
            this.r = r ;
            this.progress = p+1;
        }
        public void run (){

            while(true){
                ///// hello ... for laughing ...  hadik 1   w   2   w  3  9lebthom bark  ... t7al hadak l mochkil li 9otlk 3lih
                Platform.runLater(()-> r.setProgress(progress) );   /// 2

                progress-=1;                                        /// 3
                if(progress <= 0)                                   /// 3
                    break;                                          /// 3

                try {                                               /// 1
                    Thread.sleep(1000);                          /// 1
                }catch (Exception e){                               /// 1
                }                                                   /// 1

            }
        }
    }

 static class water extends Thread{
        FillProgressIndicator r;


        water(FillProgressIndicator r  ){
            this.r = r;

        }
        @Override
        public void run() {
            Main.activetank = false ;
            while(true){

                try {
                    Main.hey.acquire();
                    Thread.sleep(100);
                    Main.hey.release();
                }catch (Exception e){

                }
                Platform.runLater(()->{
                    r.setProgress(Main.XX);
                });


                Main.XX-=3;
                if (Main.XX <= Main.p) {
                    Main.p = Main.XX - 900;
                    break;
                }
            }
            if (Main.XX >=900) {
                Main.activetank = true;
            }
            else{
                Main.activetank = false;
            }

        }
    }

}
